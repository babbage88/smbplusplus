--
-- PostgreSQL database dump
--

-- Dumped from database version 17.2
-- Dumped by pg_dump version 17.2

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: log_user_deletion(); Type: FUNCTION; Schema: public; Owner: s2user
--

CREATE FUNCTION public.log_user_deletion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    INSERT INTO users_audit (user_id, username, email, deleted_at, deleted_by)
    VALUES (OLD.id, OLD.username, OLD.email, now(), current_user);
    RETURN OLD;
END;
$$;


ALTER FUNCTION public.log_user_deletion() OWNER TO s2user;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: app_permissions; Type: TABLE; Schema: public; Owner: s2user
--

CREATE TABLE public.app_permissions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    permission_name character varying(255) NOT NULL,
    permission_description text
);


ALTER TABLE public.app_permissions OWNER TO s2user;

--
-- Name: auth_tokens; Type: TABLE; Schema: public; Owner: s2user
--

CREATE TABLE public.auth_tokens (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    token text,
    expiration timestamp without time zone,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_modified timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.auth_tokens OWNER TO s2user;

--
-- Name: goose_db_version; Type: TABLE; Schema: public; Owner: s2user
--

CREATE TABLE public.goose_db_version (
    id integer NOT NULL,
    version_id bigint NOT NULL,
    is_applied boolean NOT NULL,
    tstamp timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.goose_db_version OWNER TO s2user;

--
-- Name: goose_db_version_id_seq; Type: SEQUENCE; Schema: public; Owner: s2user
--

ALTER TABLE public.goose_db_version ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.goose_db_version_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: health_check; Type: TABLE; Schema: public; Owner: s2user
--

CREATE TABLE public.health_check (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    status character varying(255),
    check_type character varying(255),
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_modified timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.health_check OWNER TO s2user;

--
-- Name: role_permission_mapping; Type: TABLE; Schema: public; Owner: s2user
--

CREATE TABLE public.role_permission_mapping (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    role_id uuid NOT NULL,
    permission_id uuid NOT NULL,
    enabled boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_modified timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.role_permission_mapping OWNER TO s2user;

--
-- Name: user_roles; Type: TABLE; Schema: public; Owner: s2user
--

CREATE TABLE public.user_roles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    role_name character varying(255) NOT NULL,
    role_description text,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_modified timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    enabled boolean DEFAULT true NOT NULL,
    is_deleted boolean DEFAULT false NOT NULL
);


ALTER TABLE public.user_roles OWNER TO s2user;

--
-- Name: role_permissions_view; Type: VIEW; Schema: public; Owner: s2user
--

CREATE VIEW public.role_permissions_view AS
 SELECT ur.id AS "RoleId",
    ur.role_name AS "Role",
    ap.id AS "PermissionId",
    ap.permission_name AS "Permission"
   FROM ((public.user_roles ur
     LEFT JOIN public.role_permission_mapping rpm ON ((rpm.role_id = ur.id)))
     LEFT JOIN public.app_permissions ap ON ((rpm.permission_id = ap.id)))
  WHERE ((ur.enabled = true) AND (rpm.enabled = true))
  GROUP BY ur.id, ur.role_name, ap.id, ap.permission_name
  ORDER BY ur.id, ap.id;


ALTER VIEW public.role_permissions_view OWNER TO s2user;

--
-- Name: s3_buckets; Type: TABLE; Schema: public; Owner: s2user
--

CREATE TABLE public.s3_buckets (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    provider_name text NOT NULL,
    ui_url text,
    admin_url text
);


ALTER TABLE public.s3_buckets OWNER TO s2user;

--
-- Name: squared_shares; Type: TABLE; Schema: public; Owner: s2user
--

CREATE TABLE public.squared_shares (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    s3_bucket_id uuid,
    local_path text NOT NULL,
    smb_path text,
    quota_size text
);


ALTER TABLE public.squared_shares OWNER TO s2user;

--
-- Name: user_role_mapping; Type: TABLE; Schema: public; Owner: s2user
--

CREATE TABLE public.user_role_mapping (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    role_id uuid NOT NULL,
    enabled boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_modified timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE public.user_role_mapping OWNER TO s2user;

--
-- Name: users; Type: TABLE; Schema: public; Owner: s2user
--

CREATE TABLE public.users (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    username character varying(255),
    password text,
    email character varying(255),
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_modified timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    enabled boolean DEFAULT true NOT NULL,
    is_deleted boolean DEFAULT false NOT NULL
);


ALTER TABLE public.users OWNER TO s2user;

--
-- Name: user_permissions_view; Type: VIEW; Schema: public; Owner: s2user
--

CREATE VIEW public.user_permissions_view AS
 SELECT u.id AS "UserId",
    u.username AS "Username",
    ap.id AS "PermissionId",
    ap.permission_name AS "Permission",
    ur.role_name AS "Role",
    urm.last_modified AS "LastModified"
   FROM ((((public.user_role_mapping urm
     LEFT JOIN public.user_roles ur ON ((ur.id = urm.role_id)))
     LEFT JOIN public.users u ON ((u.id = urm.user_id)))
     LEFT JOIN public.role_permission_mapping rpm ON ((rpm.role_id = urm.role_id)))
     LEFT JOIN public.app_permissions ap ON ((ap.id = rpm.permission_id)))
  WHERE (ur.enabled = true)
  ORDER BY u.id;


ALTER VIEW public.user_permissions_view OWNER TO s2user;

--
-- Name: user_roles_active; Type: VIEW; Schema: public; Owner: s2user
--

CREATE VIEW public.user_roles_active AS
 SELECT id AS "RoleId",
    role_name AS "RoleName",
    role_description AS "RoleDescription",
    created_at AS "CreatedAt",
    last_modified AS "LastModified",
    enabled AS "Enabled",
    is_deleted AS "IsDeleted"
   FROM public.user_roles
  WHERE (is_deleted IS FALSE);


ALTER VIEW public.user_roles_active OWNER TO s2user;

--
-- Name: users_audit; Type: TABLE; Schema: public; Owner: s2user
--

CREATE TABLE public.users_audit (
    audit_id integer NOT NULL,
    user_id uuid,
    username character varying(255),
    email character varying(255),
    deleted_at timestamp with time zone DEFAULT now(),
    deleted_by character varying(255)
);


ALTER TABLE public.users_audit OWNER TO s2user;

--
-- Name: users_audit_audit_id_seq; Type: SEQUENCE; Schema: public; Owner: s2user
--

CREATE SEQUENCE public.users_audit_audit_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.users_audit_audit_id_seq OWNER TO s2user;

--
-- Name: users_audit_audit_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: s2user
--

ALTER SEQUENCE public.users_audit_audit_id_seq OWNED BY public.users_audit.audit_id;


--
-- Name: users_with_roles; Type: VIEW; Schema: public; Owner: s2user
--

CREATE VIEW public.users_with_roles AS
 SELECT u.id,
    u.username,
    u.password,
    u.email,
    COALESCE(array_agg(ur.role_name) FILTER (WHERE (ur.role_name IS NOT NULL)), ARRAY[('None'::text)::character varying]) AS roles,
    COALESCE(array_agg(urm.role_id) FILTER (WHERE (urm.role_id IS NOT NULL)), '{}'::uuid[]) AS role_ids,
    u.created_at,
    u.last_modified,
    u.enabled,
    u.is_deleted
   FROM ((public.users u
     LEFT JOIN public.user_role_mapping urm ON (((u.id = urm.user_id) AND (urm.enabled = true))))
     LEFT JOIN public.user_roles ur ON ((urm.role_id = ur.id)))
  WHERE (u.is_deleted = false)
  GROUP BY u.id, u.username, u.password, u.email, u.created_at, u.last_modified, u.enabled, u.is_deleted;


ALTER VIEW public.users_with_roles OWNER TO s2user;

--
-- Name: users_audit audit_id; Type: DEFAULT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.users_audit ALTER COLUMN audit_id SET DEFAULT nextval('public.users_audit_audit_id_seq'::regclass);


--
-- Name: app_permissions app_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.app_permissions
    ADD CONSTRAINT app_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_tokens auth_tokens_pkey; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.auth_tokens
    ADD CONSTRAINT auth_tokens_pkey PRIMARY KEY (id);


--
-- Name: goose_db_version goose_db_version_pkey; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.goose_db_version
    ADD CONSTRAINT goose_db_version_pkey PRIMARY KEY (id);


--
-- Name: health_check health_check_pkey; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.health_check
    ADD CONSTRAINT health_check_pkey PRIMARY KEY (id);


--
-- Name: role_permission_mapping role_permission_mapping_pkey; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.role_permission_mapping
    ADD CONSTRAINT role_permission_mapping_pkey PRIMARY KEY (id);


--
-- Name: s3_buckets s3_buckets_pkey; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.s3_buckets
    ADD CONSTRAINT s3_buckets_pkey PRIMARY KEY (id);


--
-- Name: squared_shares squared_shares_pkey; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.squared_shares
    ADD CONSTRAINT squared_shares_pkey PRIMARY KEY (id);


--
-- Name: users unique_email; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT unique_email UNIQUE (email);


--
-- Name: role_permission_mapping unique_perm_role_id; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.role_permission_mapping
    ADD CONSTRAINT unique_perm_role_id UNIQUE (permission_id, role_id);


--
-- Name: app_permissions unique_permission_name; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.app_permissions
    ADD CONSTRAINT unique_permission_name UNIQUE (permission_name);


--
-- Name: user_roles unique_role_name; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT unique_role_name UNIQUE (role_name);


--
-- Name: user_role_mapping unique_user_role_id; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.user_role_mapping
    ADD CONSTRAINT unique_user_role_id UNIQUE (user_id, role_id);


--
-- Name: users unique_username; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT unique_username UNIQUE (username);


--
-- Name: user_role_mapping user_role_mapping_pkey; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.user_role_mapping
    ADD CONSTRAINT user_role_mapping_pkey PRIMARY KEY (id);


--
-- Name: user_roles user_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT user_roles_pkey PRIMARY KEY (id);


--
-- Name: users_audit users_audit_pkey; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.users_audit
    ADD CONSTRAINT users_audit_pkey PRIMARY KEY (audit_id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: auth_token_idx_created_at; Type: INDEX; Schema: public; Owner: s2user
--

CREATE INDEX auth_token_idx_created_at ON public.auth_tokens USING btree (created_at);


--
-- Name: auth_token_idx_userid; Type: INDEX; Schema: public; Owner: s2user
--

CREATE INDEX auth_token_idx_userid ON public.auth_tokens USING btree (user_id);


--
-- Name: idx_users_audit_user_id; Type: INDEX; Schema: public; Owner: s2user
--

CREATE INDEX idx_users_audit_user_id ON public.users_audit USING btree (user_id);


--
-- Name: user_roles_idx_created_at; Type: INDEX; Schema: public; Owner: s2user
--

CREATE INDEX user_roles_idx_created_at ON public.user_roles USING btree (created_at);


--
-- Name: users_idx_created; Type: INDEX; Schema: public; Owner: s2user
--

CREATE INDEX users_idx_created ON public.users USING btree (created_at);


--
-- Name: users_idx_user_id; Type: INDEX; Schema: public; Owner: s2user
--

CREATE INDEX users_idx_user_id ON public.users USING btree (id, username);


--
-- Name: users user_delete_trigger; Type: TRIGGER; Schema: public; Owner: s2user
--

CREATE TRIGGER user_delete_trigger AFTER DELETE ON public.users FOR EACH ROW EXECUTE FUNCTION public.log_user_deletion();


--
-- Name: auth_tokens auth_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.auth_tokens
    ADD CONSTRAINT auth_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: role_permission_mapping fk_permission; Type: FK CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.role_permission_mapping
    ADD CONSTRAINT fk_permission FOREIGN KEY (permission_id) REFERENCES public.app_permissions(id) ON DELETE CASCADE;


--
-- Name: role_permission_mapping fk_role; Type: FK CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.role_permission_mapping
    ADD CONSTRAINT fk_role FOREIGN KEY (role_id) REFERENCES public.user_roles(id) ON DELETE CASCADE;


--
-- Name: user_role_mapping fk_role; Type: FK CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.user_role_mapping
    ADD CONSTRAINT fk_role FOREIGN KEY (role_id) REFERENCES public.user_roles(id) ON DELETE CASCADE;


--
-- Name: user_role_mapping fk_user; Type: FK CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.user_role_mapping
    ADD CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: squared_shares squared_shares_s3_bucket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: s2user
--

ALTER TABLE ONLY public.squared_shares
    ADD CONSTRAINT squared_shares_s3_bucket_id_fkey FOREIGN KEY (s3_bucket_id) REFERENCES public.s3_buckets(id);


--
-- PostgreSQL database dump complete
--

